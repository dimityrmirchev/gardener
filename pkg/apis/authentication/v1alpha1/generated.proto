/*
Copyright SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.gardener.gardener.pkg.apis.authentication.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/gardener/gardener/pkg/apis/authentication/v1alpha1";

// AdminKubeconfigRequest can be used to request a kubeconfig with admin credentials
// for a Shoot cluster.
message AdminKubeconfigRequest {
  // Standard object metadata.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the specification of the AdminKubeconfigRequest.
  optional AdminKubeconfigRequestSpec spec = 2;

  // Status is the status of the AdminKubeconfigRequest.
  optional AdminKubeconfigRequestStatus status = 3;
}

// AdminKubeconfigRequestSpec contains the expiration time of the kubeconfig.
message AdminKubeconfigRequestSpec {
  // ExpirationSeconds is the requested validity duration of the credential. The
  // credential issuer may return a credential with a different validity duration so a
  // client needs to check the 'expirationTimestamp' field in a response.
  // Defaults to 1 hour.
  // +optional
  optional int64 expirationSeconds = 1;
}

// AdminKubeconfigRequestStatus is the status of the AdminKubeconfigRequest containing
// the kubeconfig and expiration of the credential.
message AdminKubeconfigRequestStatus {
  // Kubeconfig contains the kubeconfig with cluster-admin privileges for the shoot cluster.
  optional bytes kubeconfig = 1;

  // ExpirationTimestamp is the expiration timestamp of the returned credential.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time expirationTimestamp = 2;
}

// TokenRequest can be used to request a token with for a specific workload identity.
message TokenRequest {
  // Standard object metadata.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the specification of the TokenRequest.
  optional TokenRequestSpec spec = 2;

  // Status is the status of the TokenRequest.
  optional TokenRequestStatus status = 3;
}

// TokenRequestSpec contains the expiration time of the token.
message TokenRequestSpec {
  // ExpirationSeconds is the requested validity duration of the credential. The
  // credential issuer may return a credential with a different validity duration so a
  // client needs to check the 'expirationTimestamp' field in a response.
  // Defaults to 1 hour.
  // +optional
  optional int64 expirationSeconds = 1;
}

// TokenRequestStatus is the status of the TokenRequest containing
// the token.
message TokenRequestStatus {
  // Token is the bearer token.
  optional string token = 1;

  // ExpirationTimestamp is the expiration timestamp of the returned credential.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time expirationTimestamp = 2;
}

// WorkloadIdentity holds certain properties related to Gardener managed workload communicating with external systems.
message WorkloadIdentity {
  // Standard object metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the workload identity properties.
  // +optional
  optional WorkloadIdentitySpec spec = 2;

  // Most recently observed status of the WorkloadIdentity.
  // +optional
  optional WorkloadIdentityStatus status = 3;
}

// WorkloadIdentityList is a collection of WorkloadIdentities.
message WorkloadIdentityList {
  // Standard list object metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of WorkloadIdentities.
  repeated WorkloadIdentity items = 2;
}

// WorkloadIdentitySpec is the specification of a WorkloadIdentity.
message WorkloadIdentitySpec {
  // Audiences represent the target systems which the current workload identity will be used against.
  repeated string audiences = 4;
}

// WorkloadIdentityStatus holds the most recently observed status of the workload identity.
message WorkloadIdentityStatus {
  // ObservedGeneration is the most recent generation observed for this workload identity.
  // +optional
  optional int64 observedGeneration = 1;
}

