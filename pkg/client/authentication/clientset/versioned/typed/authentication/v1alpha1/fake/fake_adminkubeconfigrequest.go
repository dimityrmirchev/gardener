/*
Copyright SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/gardener/gardener/pkg/apis/authentication/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAdminKubeconfigRequests implements AdminKubeconfigRequestInterface
type FakeAdminKubeconfigRequests struct {
	Fake *FakeAuthenticationV1alpha1
	ns   string
}

var adminkubeconfigrequestsResource = v1alpha1.SchemeGroupVersion.WithResource("adminkubeconfigrequests")

var adminkubeconfigrequestsKind = v1alpha1.SchemeGroupVersion.WithKind("AdminKubeconfigRequest")

// Get takes name of the adminKubeconfigRequest, and returns the corresponding adminKubeconfigRequest object, and an error if there is any.
func (c *FakeAdminKubeconfigRequests) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.AdminKubeconfigRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(adminkubeconfigrequestsResource, c.ns, name), &v1alpha1.AdminKubeconfigRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AdminKubeconfigRequest), err
}

// List takes label and field selectors, and returns the list of AdminKubeconfigRequests that match those selectors.
func (c *FakeAdminKubeconfigRequests) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.AdminKubeconfigRequestList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(adminkubeconfigrequestsResource, adminkubeconfigrequestsKind, c.ns, opts), &v1alpha1.AdminKubeconfigRequestList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.AdminKubeconfigRequestList{ListMeta: obj.(*v1alpha1.AdminKubeconfigRequestList).ListMeta}
	for _, item := range obj.(*v1alpha1.AdminKubeconfigRequestList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested adminKubeconfigRequests.
func (c *FakeAdminKubeconfigRequests) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(adminkubeconfigrequestsResource, c.ns, opts))

}

// Create takes the representation of a adminKubeconfigRequest and creates it.  Returns the server's representation of the adminKubeconfigRequest, and an error, if there is any.
func (c *FakeAdminKubeconfigRequests) Create(ctx context.Context, adminKubeconfigRequest *v1alpha1.AdminKubeconfigRequest, opts v1.CreateOptions) (result *v1alpha1.AdminKubeconfigRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(adminkubeconfigrequestsResource, c.ns, adminKubeconfigRequest), &v1alpha1.AdminKubeconfigRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AdminKubeconfigRequest), err
}

// Update takes the representation of a adminKubeconfigRequest and updates it. Returns the server's representation of the adminKubeconfigRequest, and an error, if there is any.
func (c *FakeAdminKubeconfigRequests) Update(ctx context.Context, adminKubeconfigRequest *v1alpha1.AdminKubeconfigRequest, opts v1.UpdateOptions) (result *v1alpha1.AdminKubeconfigRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(adminkubeconfigrequestsResource, c.ns, adminKubeconfigRequest), &v1alpha1.AdminKubeconfigRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AdminKubeconfigRequest), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeAdminKubeconfigRequests) UpdateStatus(ctx context.Context, adminKubeconfigRequest *v1alpha1.AdminKubeconfigRequest, opts v1.UpdateOptions) (*v1alpha1.AdminKubeconfigRequest, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(adminkubeconfigrequestsResource, "status", c.ns, adminKubeconfigRequest), &v1alpha1.AdminKubeconfigRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AdminKubeconfigRequest), err
}

// Delete takes name of the adminKubeconfigRequest and deletes it. Returns an error if one occurs.
func (c *FakeAdminKubeconfigRequests) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(adminkubeconfigrequestsResource, c.ns, name, opts), &v1alpha1.AdminKubeconfigRequest{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAdminKubeconfigRequests) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(adminkubeconfigrequestsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.AdminKubeconfigRequestList{})
	return err
}

// Patch applies the patch and returns the patched adminKubeconfigRequest.
func (c *FakeAdminKubeconfigRequests) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.AdminKubeconfigRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(adminkubeconfigrequestsResource, c.ns, name, pt, data, subresources...), &v1alpha1.AdminKubeconfigRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AdminKubeconfigRequest), err
}
