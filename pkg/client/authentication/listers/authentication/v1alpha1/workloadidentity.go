/*
Copyright SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gardener/gardener/pkg/apis/authentication/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkloadIdentityLister helps list WorkloadIdentities.
// All objects returned here must be treated as read-only.
type WorkloadIdentityLister interface {
	// List lists all WorkloadIdentities in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkloadIdentity, err error)
	// WorkloadIdentities returns an object that can list and get WorkloadIdentities.
	WorkloadIdentities(namespace string) WorkloadIdentityNamespaceLister
	WorkloadIdentityListerExpansion
}

// workloadIdentityLister implements the WorkloadIdentityLister interface.
type workloadIdentityLister struct {
	indexer cache.Indexer
}

// NewWorkloadIdentityLister returns a new WorkloadIdentityLister.
func NewWorkloadIdentityLister(indexer cache.Indexer) WorkloadIdentityLister {
	return &workloadIdentityLister{indexer: indexer}
}

// List lists all WorkloadIdentities in the indexer.
func (s *workloadIdentityLister) List(selector labels.Selector) (ret []*v1alpha1.WorkloadIdentity, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkloadIdentity))
	})
	return ret, err
}

// WorkloadIdentities returns an object that can list and get WorkloadIdentities.
func (s *workloadIdentityLister) WorkloadIdentities(namespace string) WorkloadIdentityNamespaceLister {
	return workloadIdentityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkloadIdentityNamespaceLister helps list and get WorkloadIdentities.
// All objects returned here must be treated as read-only.
type WorkloadIdentityNamespaceLister interface {
	// List lists all WorkloadIdentities in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkloadIdentity, err error)
	// Get retrieves the WorkloadIdentity from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WorkloadIdentity, error)
	WorkloadIdentityNamespaceListerExpansion
}

// workloadIdentityNamespaceLister implements the WorkloadIdentityNamespaceLister
// interface.
type workloadIdentityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkloadIdentities in the indexer for a given namespace.
func (s workloadIdentityNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkloadIdentity, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkloadIdentity))
	})
	return ret, err
}

// Get retrieves the WorkloadIdentity from the indexer for a given namespace and name.
func (s workloadIdentityNamespaceLister) Get(name string) (*v1alpha1.WorkloadIdentity, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workloadidentity"), name)
	}
	return obj.(*v1alpha1.WorkloadIdentity), nil
}
